{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Version 1.0.4; vpn",

  "Resources": {
    "S3Key": {
      "Type" : "AWS::KMS::Key",
      "Properties" : {
        "Description" : "Share data between ec2 and s3",
        "KeyPolicy" : {
          "Version": "2012-10-17",
          "Id": "key-default-1",
          "Statement": [
            {
              "Sid": "Enable IAM User Permissions",
              "Effect": "Allow",
              "Principal": {"AWS": {"Fn::Join": ["", ["arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":root"]]}},
              "Action": "kms:*",
              "Resource": "*"
            },
            {
              "Sid": "Allow administration of the key",
              "Effect": "Allow",
              "Resource": "*",
              "Principal": {
                "AWS": [
                  {"Fn::If": [
                    "IAMUserNotEmpty",
                    {"Fn::Join": ["", ["arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":user/", {"Ref": "IAMUser"} ]]},
                    {"Fn::Join": ["", ["arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":root"]]}
                  ]}
                ]
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ]
            },
            {
              "Sid": "Allow VpnRole to use this key",
              "Effect": "Allow",
              "Principal": {
                "AWS": {"Fn::GetAtt" : [ "VpnRole", "Arn"] }
              },
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey*"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "S3KeyAlias": {
      "Type" : "AWS::KMS::Alias",
      "Properties" : {
        "AliasName" : "alias/s3key",
        "TargetKeyId" : {"Ref": "S3Key"}
      }
    },

    "VpnASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "VpnLC"
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "VpnSubnet"
          }
        ],
        "MaxSize": 2,
        "MinSize": 1,
        "DesiredCapacity": 1,

        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            },
            "PropagateAtLaunch": false
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "89b1a2fb-030b-4448-859d-88ca6ef0e1d5"
        }
      }
    },
    "VpnLC": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "a21edef8-610d-4bc2-be72-0911d0cc2616"
        }
      },
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": {"Ref": "RootVolumeSize" },
              "VolumeType": "gp2",
              "Encrypted": true
            }
          },
          { "Fn::If": [
            "UseEphemeralTrue",
            {
              "DeviceName": { "Ref": "EphemeralDeviceName" },
              "VirtualName": "ephemeral0"
            },
            { "Ref": "AWS::NoValue" }
          ]}
        ],
        "SecurityGroups": [
          { "Ref": "VpnSG" }
        ],
        "AssociatePublicIpAddress": true,
        "ImageId": {
          "Ref": "AMI"
        },
        "InstanceType": {"Ref":"InstanceType"},
        "KeyName": {"Ref": "Key"},
        "IamInstanceProfile": {
          "Ref": "VpnIProfile"
        },
        "UserData": {"Fn::Base64": {"Fn::Join": ["", [

          "#cloud-config\n",
          "coreos:\n",
          "  hostname: ",{"Ref":"VPNHostname"},"\n",
          "  units:\n",
          "    - name: locksmithd\n",
          "      mask: true\n",
          "    - name: format-ephemeral.service\n",
          "    - name: sysctl-dumb.service\n",
          "      enable: true\n",
          "      command: start\n",
          "      content: |\n",
          "        [Unit]\n",
          "        Description=Set sysctl variables\n",
          "        Before=torcx.target\n",
          "        [Service]\n",
          "        Type=oneshot\n",
          "        RemainAfterExit=true\n",
          "        ExecStart=/usr/sbin/sysctl -w net.core.netdev_max_backlog=250000\n",
          "        ExecStart=/usr/sbin/sysctl -w net.core.rmem_default=16777216\n",
          "        ExecStart=/usr/sbin/sysctl -w net.core.rmem_max=134217728\n",
          "        ExecStart=/usr/sbin/sysctl -w net.core.somaxconn=8192\n",
          "        ExecStart=/usr/sbin/sysctl -w net.core.wmem_default=16777216\n",
          "        ExecStart=/usr/sbin/sysctl -w net.core.wmem_max=134217728\n",
          "        ExecStart=/usr/sbin/sysctl -w net.ipv4.tcp_fin_timeout=10\n",
          "        ExecStart=/usr/sbin/sysctl -w net.ipv4.tcp_low_latency=0\n",
          "        ExecStart=/usr/sbin/sysctl -w net.ipv4.tcp_max_syn_backlog=8192\n",
          "        ExecStart=/usr/sbin/sysctl -w net.ipv4.tcp_max_tw_buckets=131072\n",
          "        ExecStart=/usr/sbin/sysctl -w net.ipv4.tcp_rmem=\"4096 1677721 134217728\"\n",
          "        ExecStart=/usr/sbin/sysctl -w net.ipv4.tcp_slow_start_after_idle=0\n",
          "        ExecStart=/usr/sbin/sysctl -w net.ipv4.tcp_tw_reuse=1\n",
          "        ExecStart=/usr/sbin/sysctl -w net.ipv4.tcp_wmem=\"4096 16777216 134217728\"\n",
          "        ExecStart=/usr/sbin/sysctl -w net.ipv4.udp_rmem_min=131072\n",
          "        ExecStart=/usr/sbin/sysctl -w net.ipv4.udp_wmem_min=131072\n",
          "        ExecStart=/bin/ifconfig eth0 txqueuelen 10000\n",
          "        ExecStart=/usr/sbin/tc qdisc add dev eth0 root fq\n",
          "    - name: format-ephemeral.service\n",
          { "Fn::If": ["UseEphemeralTrue",
          "      command: start\n      enable: true\n",
          "      mask: true\n"
          ]},
          "      content: |\n",
          "        [Unit]\n",
          "        Description=Formats the ephemeral drive\n",
          "        ConditionFirstBoot=yes\n",
          "        After=dev-", {"Ref": "EphemeralDeviceName" }, ".device\n",
          "        Requires=dev-", {"Ref": "EphemeralDeviceName" }, ".device\n",
          "        [Service]\n",
          "        Type=oneshot\n",
          "        RemainAfterExit=yes\n",
          "        ExecStart=/usr/sbin/wipefs -f /dev/", {"Ref": "EphemeralDeviceName" }, "\n",
          "        ExecStart=/usr/sbin/mkfs.ext4 -f /dev/", {"Ref": "EphemeralDeviceName" }, "\n",
          "    - name: var-lib-docker.mount\n",
          { "Fn::If": ["UseEphemeralTrue",
          "      command: start\n      enable: true\n",
          "      mask: true\n"
          ]},
          "      content: |\n",
          "        [Unit]\n",
          "        Description=Mount ephemeral to /var/lib/docker\n",
          "        Requires=format-ephemeral.service\n",
          "        After=format-ephemeral.service\n",
          "        [Mount]\n",
          "        What=/dev/", {"Ref": "EphemeralDeviceName" }, "\n",
          "        Where=/var/lib/docker\n",
          "        Type=ext4\n",
          "    - name: docker.service\n",
          "      drop-ins:\n",
          "        - name: 10-docker-mount.conf\n",
          "          content: |\n",
          "            [Unit]\n",
          "            After=var-lib-docker.mount\n",
          "            Wants=var-lib-docker.mount\n",
          "        - name: 10-post-start-check.conf\n",
          "          content: |\n",
          "            [Service]\n",
          "            RestartSec=10\n",
          "            ExecStartPost=/usr/bin/docker pull amazon/aws-cli\n",
          "    - name: openvpn.service\n",
          "      command: start\n",
          "      enable: true\n",
          "      content: |\n",
          "        [Unit]\n",
          "        Description=OpenVPN service\n",
          "        After=docker.service\n",
          "        [Service]\n",
          "        Restart=always\n",
          "        ExecStartPre=/opt/openvpn.sh init\n",
          "        ExecStart=/opt/openvpn.sh start\n",
          "        ExecStop=/opt/openvpn.sh stop\n",
          "        ExecStartPost=docker exec openvpn /sbin/ifconfig eth0 txqueuelen 10000\n",
          "        ExecStartPost=docker exec openvpn /sbin/tc qdisc add dev eth0 root fq\n",
          "\n",
          "write_files:\n",
          "  - path: /etc/sysctl.d/network.conf\n",
          "    permissions: 0644\n",
          "    owner: root\n",
          "    content: |\n",
          "      net.core.somaxconn=8192\n",
          "      net.ipv4.tcp_fin_timeout=10\n",
          "      net.ipv4.tcp_max_syn_backlog=8192\n",
          "      net.ipv4.tcp_max_tw_buckets=131072\n",
          "      net.ipv4.tcp_slow_start_after_idle=0\n",
          "      net.ipv4.tcp_tw_reuse=1\n",
          "      net.ipv4.udp_rmem_min=131072\n",
          "      net.ipv4.udp_wmem_min=131072\n",
          "      net.ipv6.conf.all.disable_ipv6=0\n",
          "      net.ipv6.conf.default.forwarding=1\n",
          "      net.ipv6.conf.all.forwarding=1\n",
          "      net.ipv4.tcp_sack=0\n",
          "  - path: /etc/default/openvpn\n",
          "    permissions: 0600\n",
          "    owner: root\n",
          "    content: |\n",
          "      OVPN_CIPHERS=${OVPN_CIPHERS:-EDH+aRSA:EECDH+aRSA+AESGCM:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:-CAMELLIA256:+AES256:-CAMELLIA128:+AES128:!SSLv2:!SSLv3:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!DSS:!RC4:!RC2:!SEED:!IDEA:!ECDSA:!kEDH:AES256-SHA:AES128-SHA}\n",
          "      IMAGE=${IMAGE:-flah00/openvpn}\n",
          "      OVPN_DATA=${OVPN_DATA:-openvpn_data}\n",
          "      DOMAIN=${DOMAIN:-", {"Ref":"HostedZoneName"}, "}\n",
          "      BUCKET=", {"Ref":"Bucket"}, "\n",
          "      S3_PATH=$BUCKET/$OVPN_DATA\n",
          "\n",
          "  - path: /etc/profile.d/aws.sh\n",
          "    permissions: 0644\n",
          "    owner: root\n",
          "    content: |\n",
          "      alias aws='docker run $DOCKER_ARGS -v $PWD:/work -w /work --rm -ti amazon/aws-cli --region ", {"Ref":"AWS::Region"}, "'\n",
          "\n",
          "  - path: \"/opt/openvpn.sh\"\n",
          "    permissions: 0755\n",
          "    owner: \"root\"\n",
          "    # openvpn.sh START\n",
          "    content: |\n",
          "      #!/bin/bash\n",
          "      . /etc/default/openvpn\n",
          "      \n",
          "      function aws() {\n",
          "        docker run -v $OVPN_DATA:/etc/openvpn -v $PWD:/work -w /work --rm amazon/aws-cli --region us-east-1 $*\n",
          "      }\n",
          "      function s3_sync() {\n",
          "        if [ $1 = 'to' ]; then\n",
          "          aws s3 sync /etc/openvpn s3://$S3_PATH --delete\n",
          "        else\n",
          "          aws s3 sync s3://$S3_PATH /etc/openvpn\n",
          "        fi\n",
          "      }\n",
          "      case $1 in\n",
          "        init)\n",
          "          if ! docker volume ls 2>&1 | grep -q $OVPN_DATA; then\n",
          "            $0 update-route53\n",
          "            docker volume create --name $OVPN_DATA\n",
          "      \n",
          "            if [ '`aws s3 ls $S3_PATH`' = '' ]; then\n",
          "              # config directory is empty, initialize it\n",
          "              docker run -v $OVPN_DATA:/etc/openvpn --rm $IMAGE ovpn_genconfig \\n",
          "                -C $OVPN_CIPHERS -T $OVPN_CIPHERS -u udp://$DOMAIN\n",
          "              # copy configs to s3\n",
          "              s3_sync to\n",
          "              echo \"OPENVPN INITIALIZED, YOU MUST RUN: echo ssh -i SSH_KEY core@$DOMAIN sudo /opt/openvpn.sh init-pki\" >/tmp/init-pki\n",
          "              exit 1\n",
          "            else\n",
          "              # copy configs to volume\n",
          "              s3_sync from\n",
          "            fi\n",
          "          fi\n",
          "          if ! docker inspect openvpn >/dev/null 2>&1 ; then\n",
          "            SYSCTL_ARGS=$(sed -E -e 's/^/--sysctl /' /etc/sysctl.d/network.conf)\n",
          "            docker create $SYSCTL_ARGS --name openvpn -v $OVPN_DATA:/etc/openvpn -p \\n",
          "            1194:1194/udp --cap-add=NET_ADMIN $IMAGE\n",
          "          fi\n",
          "        ;;\n",
          "        init-pki)\n",
          "          docker run -v $OVPN_DATA:/etc/openvpn --rm -it $IMAGE ovpn_initpki\n",
          "          s3_sync to\n",
          "          rm /tmp/init-pki\n",
          "          systemctl restart openvpn\n",
          "        ;;\n",
          "        start)\n",
          "          if [ -f /tmp/init-pki ]; then\n",
          "            logger -s -f /tmp/init-pki\n",
          "            exit 1\n",
          "          fi\n",
          "          docker start -a openvpn\n",
          "        ;;\n",
          "        stop)\n",
          "          docker stop openvpn\n",
          "          s3_sync to\n",
          "        ;;\n",
          "        restart)\n",
          "          systemctl stop openvpn\n",
          "          systemctl start openvpn\n",
          "        ;;\n",
          "        update-route53)\n",
          "          ZONE_ID=$(aws route53 list-hosted-zones-by-name --query 'HostedZones[*][Id,Name]' --output text | grep \", {\"Ref\":\"HostedZoneName\"}, \"| awk '{print$1}')\n",
          "          IP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)\n",
          "          RR_UPSERT='{\n",
          "          \"Comment\": \"update a record\",\n",
          "          \"Changes\": [\n",
          "              {\n",
          "                  \"Action\": \"UPSERT\",\n",
          "                  \"ResourceRecordSet\": {\n",
          "                      \"Name\": \"%s\",\n",
          "                      \"Type\": \"A\",\n",
          "                      \"TTL\": 30,\n",
          "                      \"ResourceRecords\": [ { \"Value\": \"%s\" } ]\n",
          "                  }\n",
          "              }\n",
          "          ]\n",
          "      }'\n",
          "          printf \"$RR_UPSERT\" $DOMAIN $IP > r53\n",
          "          aws route53 change-resource-record-sets --hosted-zone-id $ZONE_ID --change-batch file:///work/r53\n",
          "          rm -f r53\n",
          "        ;;\n",
          "        upgrade-container)\n",
          "          systemctl stop openvpn\n",
          "          docker rm -f openvpn\n",
          "          docker pull $IMAGE\n",
          "          docker rmi $(docker images --filter dangling=true -q)\n",
          "          systemctl start openvpn\n",
          "        ;;\n",
          "        gen*)\n",
          "          cli=${2:?Missing client}\n",
          "          docker run -v $OVPN_DATA:/etc/openvpn --rm -it $IMAGE easyrsa build-client-full ${cli} nopass\n",
          "        ;;\n",
          "        get)\n",
          "          cli=${2:?Missing client}\n",
          "          docker run -v $OVPN_DATA:/etc/openvpn --rm $IMAGE ovpn_getclient ${cli} > ${cli}.ovpn\n",
          "        ;;\n",
          "        *)\n",
          "          echo \"$0 {init|start|stop|restart|upgrade-container|gen CLIENT|get CLIENT}\"\n",
          "          exit 1\n",
          "        ;;\n",
          "      esac\n",
          "    # openvpn.sh END\n",
          "  - path: \"/opt/eth.sh\"\n",
          "    permissions: 0755\n",
          "    owner: \"root\"\n",
          "    content: |\n",
          "      #!/bin/sh\n",
          "      BUCKET=${BUCKET:-p5p-avpn}\n",
          "      CNT_NAME=${CNT_NAME:-eth1}\n",
          "      TAG=${TAG:-stable}\n",
          "      if [ $CNT_NAME = eth1 ]; then\n",
          "        IMG_NAME=ethereum/client-go:${TAG}\n",
          "        VOL_PATH=/root/.ethereum\n",
          "      else\n",
          "        CNT_NAME=beacon-node\n",
          "        IMAGE_NAME=gcr.io/prysmaticlabs/prysm/beacon-chain:${TAG}\n",
          "        VOL_PATH=/data\n",
          "      fi\n",
          "      S3_PATH=$BUCKET/$CNT_NAME\n",
          "      VOL_NAME=${CNT_NAME}_data\n",
          "      \n",
          "      function aws() {\n",
          "        docker run -v $HOME:$HOME -v $VOL_NAME:$VOL_PATH -v $PWD:/work -w /work --rm amazon/aws-cli --region us-east-1 $*\n",
          "      }\n",
          "      function s3_sync() {\n",
          "        if [ $1 = 'to' ]; then\n",
          "          aws s3 sync $VOL_PATH s3://$S3_PATH --delete\n",
          "        else\n",
          "          aws s3 sync s3://$S3_PATH $VOL_PATH\n",
          "        fi\n",
          "      }\n",
          "      \n",
          "      case $1 in\n",
          "        init)\n",
          "          if ! docker inspect $VOL_NAME >/dev/null 2>&1; then\n",
          "            docker volume create --name $VOL_NAME\n",
          "      \n",
          "            if [ '`aws s3 ls $S3_PATH`' = '' ]; then\n",
          "              # config directory is empty, initialize it\n",
          "              #docker run -v $VOL_NAME:$VOL_PATH --rm $IMG_NAME eth1_init\n",
          "              # copy configs to s3\n",
          "              s3_sync to\n",
          "            else\n",
          "              # copy configs to volume\n",
          "              s3_sync from\n",
          "            fi\n",
          "          fi\n",
          "          if ! docker inspect $CNT_NAME >/dev/null 2>&1; then\n",
          "            docker pull $IMAGE_NAME\n",
          "            if [ $CNT_NAME = eth1 ]; then\n",
          "              x=$(grep -i Memtotal /proc/meminfo |awk '{print$2}')\n",
          "              #-p 8545:8545 -p 8546:8546 -p 8547:8547 -p 30303:30303 \\\n",
          "              docker create --name $CNT_NAME \\\n",
          "                -v $VOL_NAME:$VOL_PATH \\\n",
          "                $IMG_NAME \\\n",
          "                  --http \\\n",
          "                  --http.addr 0.0.0.0 \\\n",
          "                  --http.vhosts $CNT_NAME,localhost,127.0.0.1 \\\n",
          "                  --cache $((x/1024/4))\n",
          "            else\n",
          "              #-p 4000:4000 -p 13000:13000 -p 12000:12000/udp \\\n",
          "              docker create -v $VOL_NAME:$VOL_PATH \\\n",
          "                --name $CNT_NAME \\\n",
          "                --link eth1 \\\n",
          "                $IMAGE_NAME \\\n",
          "                  --accept-terms-of-use \\\n",
          "                  --datadir=/data \\\n",
          "                  --grpc-gateway-host=0.0.0.0 \\\n",
          "                  --rpc-host=0.0.0.0 \\\n",
          "                  --monitoring-host=0.0.0.0 \\\n",
          "                  --http-web3provider=http://eth1:8545\n",
          "      \n",
          "              docker pull gcr.io/prysmaticlabs/prysm/validator:stable\n",
          "              docker volume create --name validator-${TAG}_data\n",
          "              docker create \\\n",
          "                -v validator-${TAG}:/data \\\n",
          "                --link beacon-node \\\n",
          "                --link eth1 \\\n",
          "                --name validator-$TAG \\\n",
          "                gcr.io/prysmaticlabs/prysm/validator:${TAG} \\\n",
          "                  --accept-terms-of-use \\\n",
          "                  --datadir /data \\\n",
          "                  --beacon-rpc-gateway-provider beacon-node:3500 \\\n",
          "                  --beacon-rpc-provider beacon-node:4000\n",
          "            fi\n",
          "          fi\n",
          "        ;;\n",
          "        start)\n",
          "          docker start $CNT_NAME\n",
          "        ;;\n",
          "        stop)\n",
          "          docker stop $CNT_NAME\n",
          "        ;;\n",
          "        sync-to)\n",
          "          s3_sync to\n",
          "          if [ $CNT_NAME != eth1 ]; then\n",
          "            VOL_NAME=validator-${TAG}_data\n",
          "            S3_PATH=$BUCKET/$VOL_NAME\n",
          "            s3_sync to\n",
          "          fi\n",
          "        ;;\n",
          "        restart)\n",
          "          systemctl stop $CNT_NAME\n",
          "          systemctl start $CNT_NAME\n",
          "        ;;\n",
          "        upgrade-container)\n",
          "          docker stop $CNT_NAME\n",
          "          s3_sync to\n",
          "          docker rm -f $CNT_NAME\n",
          "          docker pull $IMG_NAME\n",
          "          docker rmi $(docker images --filter dangling=true -q)\n",
          "          $0 init\n",
          "          $0 start\n",
          "        ;;\n",
          "        *)\n",
          "          echo \"$0 {init|start|stop|restart|upgrade-container}\"\n",
          "          exit 1\n",
          "        ;;\n",
          "      esac\n"

        ]]}}

      },

      "DependsOn": [
        "VpnRole"
      ]
    },
    "VpnVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "CidrBlock": "10.254.0.0/16",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "84544de5-27e9-4748-a2de-be74414d7dbe"
        }
      }
    },
    "VpnSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VpnVPC"
        },
        "MapPublicIpOnLaunch": true,
        "AvailabilityZone": {"Ref": "AZ"},
        "CidrBlock": "10.254.254.0/24"
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "9a22905d-84df-4e54-a549-6de8eb7f98e9"
        }
      },
      "DependsOn": [
        "VpnVPC"
      ]
    },
    "VpnSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VpnVPC"
        },
        "GroupDescription": "OpenVPN Rules",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "ICMP",
            "FromPort": 3,
            "ToPort": 4,
            "Description": "enable pmtud"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "UDP",
            "FromPort": 1194,
            "ToPort": 1194
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "TCP",
            "FromPort": 80,
            "ToPort": 80
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "TCP",
            "FromPort": 443,
            "ToPort": 443
          },
          {
            "CidrIp": {
              "Ref": "AllowSshFrom"
            },
            "IpProtocol": "TCP",
            "FromPort": 22,
            "ToPort": 22
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "82352a68-536a-4c20-a305-4e9723e3c579"
        }
      },
      "DependsOn": [
        "VpnVPC"
      ]
    },
    "VpnIG": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "f0893db0-add1-4fb5-a513-63620a5c9c7e"
        }
      }
    },
    "VpnDO": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainNameServers": [
          "9.9.9.9",
          "1.1.1.1"
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "cc8422a2-3772-4bed-9036-b99711f32a00"
        }
      }
    },
    "VpcDHCPOA": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "DhcpOptionsId": {
          "Ref": "VpnDO"
        },
        "VpcId": {
          "Ref": "VpnVPC"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "8547cc39-b356-4810-ba1a-113979a3494c"
        }
      }
    },
    "VpnGA": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "VpnIG"
        },
        "VpcId": {
          "Ref": "VpnVPC"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "accd3ed4-73d7-49bc-a148-8df49533f4cd"
        }
      }
    },
    "VpnRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "GatewayId": {
          "Ref": "VpnIG"
        },
        "RouteTableId": {
          "Ref": "VpnRT"
        },
        "DestinationCidrBlock": "0.0.0.0/0"
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "c9e4d3e5-2069-4595-bcf6-695bbb10d8c4"
        }
      }
    },
    "VpnRT": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpnVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "f7770436-0117-461e-808b-202f89b5c864"
        }
      }
    },
    "VpnRTA": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpnRT"
        },
        "SubnetId": {
          "Ref": "VpnSubnet"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "8cd2dd74-7391-44ff-95fe-ae4c99455321"
        }
      }
    },
    "VpnIProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "VpnRole"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "4cc4f58d-55a3-46c1-b76f-b0a1916a7370"
        }
      }
    },
    "VpnRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "19644da1-adff-45c9-b9c5-7296714d01ff"
        }
      }
    },
    "VpnPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "s3rw",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:Put*",
                "s3:Get*",
                "s3:List*"
              ],
              "Resource": [
                { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "Bucket" } ] ] },
                { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "Bucket" }, "/*" ] ] }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "route53:Change*",
                "route53:List*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "VpnRole"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "c722d649-9328-42eb-9380-ca6895599364"
        }
      }
    }
  },
  "Parameters": {
    "AMI": {
      "Type": "AWS::EC2::Image::Id",
      "Default": "",
      "Description": "us-east-1 ami for flatcar"
    },
    "AZ": {
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "Description": "Availability Zone for the VPC"
    },
    "AllowSshFrom": {
      "Type": "String",
      "Default": "0.0.0.0/0",
      "Description": "SSH bastion host"
    },
    "Bucket": {
      "Type": "String",
      "Default": "",
      "Description": "S3 Bucket, used to manage VPN configs, which you've created"
    },
    "HostedZoneName": {
      "Type": "String",
      "Default": "",
      "Description": "Route53 zone (which you've created) to update"
    },
    "VPNHostname": {
      "Type": "String",
      "Default": "",
      "Description": "The hostname of the VPN server"
    },
    "InstanceType": {
      "Type": "String",
      "Default": "t3.small",
      "Description": "VPN instance type"
    },
    "Key": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "",
      "Description": "Ssh key name"
    },
    "IAMUser": {
      "Type": "String",
      "Default": "",
      "Description": "IAM user name, permitted to use KMS key"
    },
    "RootVolumeSize": {
      "Type": "String",
      "Default": "10",
      "Description": "Gb size of root volume"
    },
    "EphemeralDockerPartition": {
      "Type": "String",
      "Default": "false",
      "Description": "Mount /var/lib/docker to an ephemeral volume",
      "AllowedValues": ["true", "false"]
    },
    "EphemeralDeviceName": {
      "Type": "String",
      "Default": "xvdf",
      "Description": "Device name of the ephemeral volume (not path)"
    }
  },

  "Conditions": {
    "IAMUserNotEmpty": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "IAMUser" }, "" ] }
      ]
    },

    "UseEphemeralTrue": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "EphemeralDockerPartition" }, "false" ] }
      ]
    }
  },

  "Outputs": {
    "S3KeyArn": {
      "Value": { "Ref": "S3Key" },
      "Description": "Id of KMS key"
    },
    "S3KeyAliasArn": {
      "Value": { "Ref": "S3KeyAlias" },
      "Description": "Alias of KMS key"
    },
    "VpnVPCArn": {
      "Value": { "Ref": "VpnVPC" },
      "Description": "Vpc"
    },
    "VpnIProfileArn": {
      "Value": { "Ref": "VpnIProfile" },
      "Description": "Instance Profile Arn"
    },
    "VpnRoleArn": {
      "Value": { "Ref": "VpnRole" },
      "Description": "Role"
    }
  }
}
